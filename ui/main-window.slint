import { Const } from "constants.slint";
import { Board, CellState } from "board.slint";
import { Button, LineEdit } from "std-widgets.slint";

export component MainWindow inherits Window {
    in property <int> cols;
    in property <int> rows;
    in-out property <[CellState]> cells;

    in property <[[int]]> col_hints;
    in property <[[int]]> row_hints;
    in property <int> max_col_hints;
    in property <int> max_row_hints;

    out property <string> puzzle_code: puzzle_edit.text;
    callback parse_puzzle();

    VerticalLayout {
        HorizontalLayout {
            padding: 5px;
            spacing: 10px;
            Text {
                font-size: 14px;
                text: "Enter puzzle code to parse:";
            }
            puzzle_edit := LineEdit {
            }
            Button {
                text: "Parse";
                clicked => {
                    parse_puzzle();
                }
            }
        }

        GridLayout {
            spacing: 5px;
            padding: 5px;
    
            Row {
                Rectangle {
                    width: Const.cell_size * max_row_hints;
                    height: Const.cell_size * max_col_hints;
                    background: transparent;
                }
                HorizontalLayout {
                    for hints[c] in col_hints: VerticalLayout {
                        alignment: end;
                        // filler to keep layout for columns with no hints
                        Rectangle {
                            width: Const.cell_size;
                            height: 1px;
                        }
                        for hint in hints: Text {
                            width: Const.cell_size;
                            height: Const.cell_size;
                            font-size: 14px;
                            horizontal-alignment: center;
                            vertical-alignment: center;
                            text: hint;
                            color: c == board.c ? Const.highlight_color : Const.empty_color;
                        }
                    } 
                }
            }
            Row {
                VerticalLayout {
                    for hints[r] in row_hints: HorizontalLayout {
                        alignment: end;
                        // filler to keep layout for rows with no hints
                        Rectangle {
                            width: 1px;
                            height: Const.cell_size;
                        }
                        for hint in hints: Text {
                            width: Const.cell_size;
                            height: Const.cell_size;
                            font-size: 14px;
                            horizontal-alignment: center;
                            vertical-alignment: center;
                            text: hint;
                            color: r == board.r ? Const.highlight_color : Const.empty_color;
                        }
                    } 
                }
                board := Board {
                    cols: cols;
                    rows: rows;
                    cells: cells;
                }
            }
        }    
    }
}